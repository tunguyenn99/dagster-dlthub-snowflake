SELECT 
    *
FROM DAGSTER_DB.ANALYTICS.ACCOUNTS a
INNER JOIN DAGSTER_DB.ANALYTICS.ACCOUNTS__PRODUCTS ap ON a._DLT_ID = ap._DLT_PARENT_ID


SELECT 
    *
FROM DAGSTER_DB.ANALYTICS.TRANSACTIONS t
INNER JOIN DAGSTER_DB.ANALYTICS.TRANSACTIONS__TRANSACTIONS tt ON t._DLT_ID = tt._DLT_PARENT_ID


SELECT
    ACCOUNT_ID,
    DATE::DATE AS transaction_date,
    TRANSACTION_CODE AS type,
    SYMBOL AS stock,
    AMOUNT::INT AS volume,
    PRICE::FLOAT AS unit_price,
    TOTAL::FLOAT AS total_value
FROM DAGSTER_DB.ANALYTICS.TRANSACTIONS t
INNER JOIN DAGSTER_DB.ANALYTICS.TRANSACTIONS__TRANSACTIONS tt ON t._DLT_ID = tt._DLT_PARENT_ID 

SELECT 
    a.ACCOUNT_ID,
    a.LIMIT::INT AS CREDIT_LIMIT,
    ap.VALUE AS PRODUCT
FROM DAGSTER_DB.ANALYTICS.ACCOUNTS a
INNER JOIN DAGSTER_DB.ANALYTICS.ACCOUNTS__PRODUCTS ap 
    ON a._DLT_ID = ap._DLT_PARENT_ID

WITH base_accounts AS (
    SELECT 
        ACCOUNT_ID,
        LIMIT::INT AS CREDIT_LIMIT
    FROM DAGSTER_DB.ANALYTICS.ACCOUNTS a
    INNER JOIN DAGSTER_DB.ANALYTICS.ACCOUNTS__PRODUCTS ap ON a._DLT_ID = ap._DLT_PARENT_ID
),
transaction_agg AS (
    SELECT 
        ACCOUNT_ID,
        COUNT(*) AS NUM_TRANSACTIONS,
        SUM(AMOUNT) AS TOTAL_VOLUME,
        SUM(TOTAL::FLOAT) AS TOTAL_VALUE,
        AVG(PRICE::FLOAT) AS AVG_PRICE
    FROM DAGSTER_DB.ANALYTICS.TRANSACTIONS t
    INNER JOIN DAGSTER_DB.ANALYTICS.TRANSACTIONS__TRANSACTIONS tt ON t._DLT_ID = tt._DLT_PARENT_ID
    GROUP BY ACCOUNT_ID
)
SELECT 
    a.ACCOUNT_ID,
    a.CREDIT_LIMIT,
    t.NUM_TRANSACTIONS,
    t.TOTAL_VOLUME,
    t.TOTAL_VALUE,
    t.AVG_PRICE
FROM base_accounts a
LEFT JOIN transaction_agg t ON a.ACCOUNT_ID = t.ACCOUNT_ID    